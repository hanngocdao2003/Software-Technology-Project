// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  isAdmin        Boolean  @default(false)
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationship
  tickets Ticket[]

  @@map("users")
}

model TradeMark {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String //Mô tả loại xe [Ghế, Nằm ,Lismouse]
  numChair          Int                 @default(0)
  vehicles          Vehicle[]
  Vehicle_Availabel Vehicle_Availabel[]

  @@map("tradeMark")
}

model Vehicle {
  id                 Int       @id @default(autoincrement())
  licensePlate       String
  time               String
  timeIntend         String    @default("22:00")
  price              Int       @default(500000)
  date               DateTime
  departure_location String
  destination        String
  TradeId            Int
  trade              TradeMark @relation(fields: [TradeId], references: [id])

  @@map("vehicles")
}

model Vehicle_Availabel {
  id                 Int       @id @default(autoincrement())
  licensePlate       String
  time               String
  timeIntend         String    @default("22:00")
  price              Int       @default(500000)
  date               DateTime
  departure_location String
  destination        String
  tickets            Ticket[]
  TradeId            Int
  trade              TradeMark @relation(fields: [TradeId], references: [id])
}

model Ticket {
  id        Int      @id @default(autoincrement())
  chair     String
  name      String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @default(0)
  vehicleId Int
  isBougth  Boolean  @default(false)
  // Relationship 
  // user      User     @relation(fields: [userId], references: [id])

  vehicle Vehicle_Availabel @relation(fields: [vehicleId], references: [id])
  User    User              @relation(fields: [userId], references: [id])

  @@map("ticket")
}
